// Generated by CoffeeScript 1.8.0
var counter, expect, inNode, key, pkg, port, ports, ragents, server, shelljs, url;

inNode = typeof Window === "undefined";

key = "to-be-calculated";

counter = 0;

if (inNode) {
  expect = require("expect.js");
  shelljs = require("shelljs");
  ports = require("ports");
  ragents = require("../../ragents");
  pkg = require("../package.json");
  port = ports.getPort(pkg.name);
  url = "ws://localhost:" + port;
  server = "../ragents-server/lib/ragentsd";
} else {
  url = location.origin.replace(/^http/, "ws");
}

describe("rpc", function() {
  var serverProcess;
  serverProcess = null;
  before(function(done) {
    var cmd;
    if (!inNode) {
      return done();
    }
    cmd = "node " + server + " --port " + port;
    serverProcess = shelljs.exec(cmd, {
      async: true
    }, function(code, output) {});
    return setTimeout(done, 1000);
  });
  after(function() {
    if (!inNode) {
      return;
    }
    if (serverProcess == null) {
      return;
    }
    console.log("killing ragentsd server");
    serverProcess.kill();
    return serverProcess = null;
  });
  beforeEach(function() {
    return key = "" + (Date.now()) + "-${counter++}";
  });
  afterEach(function() {});
  return it("echo", function(done) {
    var bodySent;
    bodySent = {
      a: 1,
      b: {
        c: 3,
        d: 4
      }
    };
    return ragents.createSession({
      url: url,
      key: key
    }, function(err, session) {
      var agentInfo;
      agentInfo = {
        name: "echo",
        title: "echo"
      };
      return session.createAgent(agentInfo, function(err, agent) {
        agent.receive("echo", function(body, reply) {
          return reply(null, body);
        });
        return session.getRemoteAgents(function(err, ragents) {
          var ragent;
          ragent = ragents[0];
          return ragent.send("echo", bodySent, function(err, bodyRecv) {
            var bodyNew, bodyOrg;
            bodyOrg = JSON.stringify(bodySent);
            bodyNew = JSON.stringify(bodyRecv);
            expect(bodyNew).to.be(bodyOrg);
            return done();
          });
        });
      });
    });
  });
});
